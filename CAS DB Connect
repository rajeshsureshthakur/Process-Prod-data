import java.io.FileWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class DatabaseQueryToCsv {
    private static final String DB_URL = "jdbc:mysql://localhost:3306/your_database";
    private static final String USER = "your_username";
    private static final String PASS = "your_password";
    private static final String CSV_FILE = "query_results.csv";
    
    public static void main(String[] args) {
        if (args.length != 2) {
            System.out.println("Usage: java DatabaseQueryToCsv <fromDate> <toDate>");
            System.out.println("Date format: DD/MM/YYYY HH24:MI:SS");
            System.out.println("Example: java DatabaseQueryToCsv \"01/01/2024 00:00:00\" \"31/01/2024 23:59:59\"");
            return;
        }

        String fromDate = args[0];
        String toDate = args[1];
        
        // Validate date format
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        try {
            Date startDate = dateFormat.parse(fromDate);
            Date endDate = dateFormat.parse(toDate);
            if (endDate.before(startDate)) {
                System.out.println("Error: To date must be after From date");
                return;
            }
        } catch (ParseException e) {
            System.out.println("Error: Invalid date format. Please use DD/MM/YYYY HH24:MI:SS");
            return;
        }

        // List of queries with parameterized dates
        List<QueryData> queries = new ArrayList<>();
        queries.add(new QueryData(
            "Total Orders", 
            "SELECT COUNT(*) FROM orders WHERE order_date BETWEEN STR_TO_DATE(?, '%d/%m/%Y %H:%i:%s') AND STR_TO_DATE(?, '%d/%m/%Y %H:%i:%s')"
        ));
        queries.add(new QueryData(
            "Completed Orders", 
            "SELECT COUNT(*) FROM orders WHERE status = 'COMPLETED' AND order_date BETWEEN STR_TO_DATE(?, '%d/%m/%Y %H:%i:%s') AND STR_TO_DATE(?, '%d/%m/%Y %H:%i:%s')"
        ));
        queries.add(new QueryData(
            "Total Revenue", 
            "SELECT COUNT(*) FROM transactions WHERE transaction_date BETWEEN STR_TO_DATE(?, '%d/%m/%Y %H:%i:%s') AND STR_TO_DATE(?, '%d/%m/%Y %H:%i:%s')"
        ));
        // Add more queries as needed...

        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);
             FileWriter csvWriter = new FileWriter(CSV_FILE)) {
            
            // Write CSV header
            csvWriter.append("Query Description,Count,Date Range\n");
            
            // Execute each query with date parameters
            for (QueryData query : queries) {
                try (PreparedStatement pstmt = conn.prepareStatement(query.sql)) {
                    // Set date parameters for each query
                    pstmt.setString(1, fromDate);
                    pstmt.setString(2, toDate);
                    
                    try (ResultSet rs = pstmt.executeQuery()) {
                        if (rs.next()) {
                            int count = rs.getInt(1);
                            // Write to CSV: description,count,date range
                            csvWriter.append(escapeSpecialCharacters(query.description))
                                    .append(",")
                                    .append(String.valueOf(count))
                                    .append(",")
                                    .append(escapeSpecialCharacters(fromDate + " to " + toDate))
                                    .append("\n");
                        }
                    }
                } catch (Exception e) {
                    System.err.println("Error executing query: " + query.description);
                    e.printStackTrace();
                }
            }
            
            System.out.println("Results have been written to " + CSV_FILE);
            
        } catch (Exception e) {
            System.err.println("Error connecting to database or writing to file");
            e.printStackTrace();
        }
    }
    
    private static class QueryData {
        String description;
        String sql;
        
        QueryData(String description, String sql) {
            this.description = description;
            this.sql = sql;
        }
    }
    
    private static String escapeSpecialCharacters(String text) {
        if (text.contains(",") || text.contains("\"") || text.contains("\n")) {
            text = text.replace("\"", "\"\"");
            return "\"" + text + "\"";
        }
        return text;
    }
}
