import javax.swing.*;
import com.toedter.calendar.JDateChooser;
import java.awt.*;
import java.text.SimpleDateFormat;
import java.util.Date;

public class CSVMergerUI extends JFrame {
    private JDateChooser startDateChooser;
    private JDateChooser endDateChooser;
    private JComboBox<String> runNumberCombo;
    private JButton submitButton;
    private JTextArea logArea;

    public CSVMergerUI() {
        setTitle("CSV Merger");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout(10, 10));
        
        // Main panel
        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));
        mainPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        // Date Selection Panel
        JPanel datePanel = new JPanel(new GridLayout(2, 2, 5, 5));
        datePanel.setBorder(BorderFactory.createTitledBorder("Select Dates"));
        
        startDateChooser = new JDateChooser();
        startDateChooser.setDateFormatString("yyyy-MM-dd");
        endDateChooser = new JDateChooser();
        endDateChooser.setDateFormatString("yyyy-MM-dd");
        
        datePanel.add(new JLabel("Start Date:"));
        datePanel.add(startDateChooser);
        datePanel.add(new JLabel("End Date:"));
        datePanel.add(endDateChooser);

        // Run Number Panel
        JPanel runPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        String[] runs = {"1", "2"};
        runNumberCombo = new JComboBox<>(runs);
        runPanel.add(new JLabel("Run Number:"));
        runPanel.add(runNumberCombo);

        // Submit Button
        submitButton = new JButton("Process Files");
        submitButton.addActionListener(e -> processFiles());

        // Log Area
        logArea = new JTextArea(10, 40);
        logArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(logArea);
        scrollPane.setBorder(BorderFactory.createTitledBorder("Log"));

        // Add components
        mainPanel.add(datePanel);
        mainPanel.add(Box.createRigidArea(new Dimension(0, 10)));
        mainPanel.add(runPanel);
        mainPanel.add(Box.createRigidArea(new Dimension(0, 10)));
        mainPanel.add(submitButton);
        mainPanel.add(Box.createRigidArea(new Dimension(0, 10)));
        mainPanel.add(scrollPane);

        add(mainPanel);
        pack();
        setLocationRelativeTo(null);
    }

    private void processFiles() {
        // Validate inputs
        if (startDateChooser.getDate() == null || endDateChooser.getDate() == null) {
            JOptionPane.showMessageDialog(this, 
                "Please select both start and end dates.", 
                "Validation Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (endDateChooser.getDate().before(startDateChooser.getDate())) {
            JOptionPane.showMessageDialog(this, 
                "End date must be after start date.", 
                "Validation Error", 
                JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Disable submit button while processing
        submitButton.setEnabled(false);
        logArea.append("Starting process...\n");

        // Run processing in background thread
        SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {
            @Override
            protected Void doInBackground() throws Exception {
                try {
                    // Format dates
                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                    String startDate = dateFormat.format(startDateChooser.getDate());
                    String endDate = dateFormat.format(endDateChooser.getDate());
                    int runNumber = Integer.parseInt((String)runNumberCombo.getSelectedItem());

                    // Create String array for arguments
                    String[] args = new String[]{
                        startDate,
                        endDate,
                        String.valueOf(runNumber)
                    };

                    // Call the main CSVMerger
                    CSVMerger.main(args);
                    
                    logArea.append("Processing completed successfully!\n");
                } catch (Exception e) {
                    logArea.append("Error: " + e.getMessage() + "\n");
                    e.printStackTrace();
                }
                return null;
            }

            @Override
            protected void done() {
                submitButton.setEnabled(true);
            }
        };

        worker.execute();
    }

    public static void main(String[] args) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            e.printStackTrace();
        }

        SwingUtilities.invokeLater(() -> {
            CSVMergerUI ui = new CSVMergerUI();
            ui.setVisible(true);
        });
    }
}
